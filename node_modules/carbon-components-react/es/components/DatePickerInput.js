var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { Component } from 'react';
import classNames from 'classnames';

var DatePickerInput = function (_Component) {
  _inherits(DatePickerInput, _Component);

  function DatePickerInput() {
    _classCallCheck(this, DatePickerInput);

    return _possibleConstructorReturn(this, (DatePickerInput.__proto__ || Object.getPrototypeOf(DatePickerInput)).apply(this, arguments));
  }

  _createClass(DatePickerInput, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          id = _props.id,
          labelText = _props.labelText,
          invalid = _props.invalid,
          invalidText = _props.invalidText,
          hideLabel = _props.hideLabel,
          _onChange = _props.onChange,
          _onClick = _props.onClick,
          placeholder = _props.placeholder,
          type = _props.type,
          datePickerType = _props.datePickerType,
          pattern = _props.pattern,
          other = _objectWithoutProperties(_props, ['id', 'labelText', 'invalid', 'invalidText', 'hideLabel', 'onChange', 'onClick', 'placeholder', 'type', 'datePickerType', 'pattern']);

      var datePickerInputProps = {
        id: id,
        onChange: function onChange(evt) {
          if (!other.disabled) {
            _onChange(evt);
          }
        },
        onClick: function onClick(evt) {
          if (!other.disabled) {
            _onClick(evt);
          }
        },
        placeholder: placeholder,
        type: type,
        pattern: pattern
      };

      var labelClasses = classNames('bx--label', {
        'bx--visually-hidden': hideLabel
      });

      var datePickerIcon = datePickerType === 'single' ? React.createElement(
        'svg',
        {
          className: 'bx--date-picker__icon',
          width: '17',
          height: '19',
          viewBox: '0 0 17 19'
        },
        React.createElement('path', { d: 'M12 0h2v2.7h-2zM3 0h2v2.7H3z' }),
        React.createElement('path', { d: 'M0 2v17h17V2H0zm15 15H2V7h13v10z' }),
        React.createElement('path', { d: 'M9.9 15H8.6v-3.9H7.1v-.9c.9 0 1.7-.3 1.8-1.2h1v6z' })
      ) : '';

      var label = labelText ? React.createElement(
        'label',
        { htmlFor: id, className: labelClasses },
        labelText
      ) : null;

      var error = invalid ? React.createElement(
        'div',
        { className: 'bx--form-requirement' },
        invalidText
      ) : null;

      var input = invalid ? React.createElement('input', _extends({}, other, datePickerInputProps, {
        ref: function ref(input) {
          _this2.input = input;
        },
        'data-invalid': true,
        className: 'bx--date-picker__input'
      })) : React.createElement('input', _extends({
        ref: function ref(input) {
          _this2.input = input;
        }
      }, other, datePickerInputProps, {
        className: 'bx--date-picker__input'
      }));

      return React.createElement(
        'div',
        { className: 'bx--date-picker-container' },
        label,
        datePickerIcon,
        input,
        error
      );
    }
  }]);

  return DatePickerInput;
}(Component);

DatePickerInput.propTypes = {
  id: PropTypes.string.isRequired,
  children: PropTypes.node
};
DatePickerInput.defaultProps = {
  pattern: 'd{1,2}/d{1,2}/d{4}',
  type: 'text',
  disabled: false,
  invalid: false,
  labelText: 'Please provide label text'
};


export default DatePickerInput;