var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { Component } from 'react';
import Icon from './Icon';
import classNames from 'classnames';

var NumberInput = function (_Component) {
  _inherits(NumberInput, _Component);

  function NumberInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, NumberInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NumberInput.__proto__ || Object.getPrototypeOf(NumberInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: _this.props.min || _this.props.value
    }, _this.handleChange = function (evt) {
      if (!_this.props.disabled) {
        _this.setState({
          value: evt.target.value
        });

        _this.props.onChange(evt);
      }
    }, _this.handleArrowClick = function (evt, direction) {
      var value = typeof _this.state.value === 'string' ? Number(_this.state.value) : _this.state.value;
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          min = _this$props.min,
          max = _this$props.max,
          step = _this$props.step;

      var conditional = direction === 'down' ? min !== undefined && value > min || min === undefined : max !== undefined && value < max || max === undefined;

      if (!disabled && conditional) {
        value = direction === 'down' ? value - step : value + step;

        _this.setState({
          value: value
        });

        _this.props.onClick(evt);
        _this.props.onChange(evt);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(NumberInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value !== this.props.value) {
        this.setState({ value: nextProps.value });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled,
          iconDescription = _props.iconDescription,
          id = _props.id,
          label = _props.label,
          max = _props.max,
          min = _props.min,
          step = _props.step,
          other = _objectWithoutProperties(_props, ['className', 'disabled', 'iconDescription', 'id', 'label', 'max', 'min', 'step']);

      var numberInputClasses = classNames('bx--number', className);

      var props = {
        disabled: disabled,
        id: id,
        max: max,
        min: min,
        step: step,
        onChange: this.handleChange,
        value: this.state.value
      };

      return React.createElement(
        'div',
        { className: 'bx--form-item' },
        React.createElement(
          'label',
          { htmlFor: id, className: 'bx--label' },
          label
        ),
        React.createElement(
          'div',
          { className: numberInputClasses },
          React.createElement('input', _extends({ type: 'number', pattern: '[0-9]*' }, other, props)),
          React.createElement(
            'div',
            { className: 'bx--number__controls' },
            React.createElement(Icon, {
              onClick: function onClick(evt) {
                return _this2.handleArrowClick(evt, 'up');
              },
              className: 'up-icon',
              name: 'caret--up',
              description: this.props.iconDescription,
              viewBox: '0 -6 10 5'
            }),
            React.createElement(Icon, {
              onClick: function onClick(evt) {
                return _this2.handleArrowClick(evt, 'down');
              },
              className: 'down-icon',
              name: 'caret--down',
              viewBox: '0 6 10 5',
              description: this.props.iconDescription
            })
          )
        )
      );
    }
  }]);

  return NumberInput;
}(Component);

NumberInput.propTypes = {
  className: PropTypes.string,
  disabled: PropTypes.bool,
  iconDescription: PropTypes.string.isRequired,
  id: PropTypes.string.isRequired,
  label: PropTypes.string,
  max: PropTypes.number,
  min: PropTypes.number,
  onChange: PropTypes.func,
  onClick: PropTypes.func,
  step: PropTypes.number,
  value: PropTypes.number
};
NumberInput.defaultProps = {
  disabled: false,
  iconDescription: 'choose a number',
  label: ' ',
  onChange: function onChange() {},
  onClick: function onClick() {},
  step: 1,
  value: 0
};


export default NumberInput;