var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { Component } from 'react';
import classNames from 'classnames';

var TimePicker = function (_Component) {
  _inherits(TimePicker, _Component);

  function TimePicker() {
    _classCallCheck(this, TimePicker);

    return _possibleConstructorReturn(this, (TimePicker.__proto__ || Object.getPrototypeOf(TimePicker)).apply(this, arguments));
  }

  _createClass(TimePicker, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          id = _props.id,
          labelText = _props.labelText,
          type = _props.type,
          pattern = _props.pattern,
          _onChange = _props.onChange,
          _onClick = _props.onClick,
          placeholder = _props.placeholder,
          maxLength = _props.maxLength,
          invalidText = _props.invalidText,
          invalid = _props.invalid,
          hideLabel = _props.hideLabel,
          other = _objectWithoutProperties(_props, ['children', 'className', 'id', 'labelText', 'type', 'pattern', 'onChange', 'onClick', 'placeholder', 'maxLength', 'invalidText', 'invalid', 'hideLabel']);

      var timePickerInputProps = {
        onChange: function onChange(evt) {
          if (!other.disabled) {
            _onChange(evt);
          }
        },
        onClick: function onClick(evt) {
          if (!other.disabled) {
            _onClick(evt);
          }
        },
        pattern: pattern,
        placeholder: placeholder,
        maxLength: maxLength,
        id: id,
        type: type
      };

      var timePickerClasses = classNames(_defineProperty({
        'bx--time-picker': true
      }, className, className));

      var labelClasses = classNames('bx--label', {
        'bx--visually-hidden': hideLabel
      });

      var label = labelText ? React.createElement(
        'label',
        { htmlFor: id, className: labelClasses },
        labelText
      ) : null;

      var error = invalid ? React.createElement(
        'div',
        { className: 'bx--form-requirement' },
        invalidText
      ) : null;

      return React.createElement(
        'div',
        { className: 'bx--form-item' },
        label,
        React.createElement(
          'div',
          { className: timePickerClasses },
          React.createElement(
            'div',
            { className: 'bx--time-picker__input' },
            React.createElement('input', _extends({}, other, timePickerInputProps, {
              className: 'bx--time-picker__input-field'
            })),
            error
          ),
          children
        )
      );
    }
  }]);

  return TimePicker;
}(Component);

TimePicker.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  id: PropTypes.string.isRequired,
  labelText: PropTypes.string,
  onClick: PropTypes.func,
  type: PropTypes.string,
  pattern: PropTypes.string,
  placeholder: PropTypes.string,
  maxLength: PropTypes.number,
  invalid: PropTypes.bool,
  invalidText: PropTypes.string,
  hideLabel: PropTypes.bool,
  disabled: PropTypes.bool
};
TimePicker.defaultProps = {
  type: 'text',
  pattern: '(1[012]|[1-9]):[0-5][0-9](\\s)?(?i)',
  placeholder: 'hh:mm',
  maxLength: 5,
  invalidText: 'Invalid time format.',
  invalid: false,
  disabled: false,
  onChange: function onChange() {},
  onClick: function onClick() {}
};
export default TimePicker;