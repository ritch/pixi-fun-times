var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';
import CopyButton from './CopyButton';

var propTypes = {
  type: PropTypes.string,
  className: PropTypes.string,
  children: PropTypes.string,
  onClick: PropTypes.func
};

var defaultProps = {
  type: 'terminal'
};

var CodeSnippet = function CodeSnippet(_ref) {
  var className = _ref.className,
      type = _ref.type,
      children = _ref.children,
      onClick = _ref.onClick,
      other = _objectWithoutProperties(_ref, ['className', 'type', 'children', 'onClick']);

  var snippetType = type === 'terminal' ? 'bx--snippet--terminal' : 'bx--snippet--code';
  var wrapperClasses = classNames('bx--snippet', className, snippetType);
  return React.createElement(
    'div',
    _extends({ className: wrapperClasses }, other),
    React.createElement(
      'div',
      { className: 'bx--snippet-container' },
      React.createElement(
        'code',
        null,
        React.createElement(
          'pre',
          null,
          children
        )
      )
    ),
    React.createElement(CopyButton, { onClick: onClick })
  );
};

CodeSnippet.propTypes = propTypes;
CodeSnippet.defaultProps = defaultProps;

export default CodeSnippet;