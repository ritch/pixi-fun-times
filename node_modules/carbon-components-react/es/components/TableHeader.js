var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';
import Icon from './Icon';

var propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  iconClassName: PropTypes.string,
  sortDir: PropTypes.string
};

var TableHeader = function TableHeader(props) {
  var children = props.children,
      className = props.className,
      iconClassName = props.iconClassName,
      sortDir = props.sortDir,
      other = _objectWithoutProperties(props, ['children', 'className', 'iconClassName', 'sortDir']);

  var tableHeaderClasses = classNames(className, 'bx--table-header');

  var iconClasses = classNames(iconClassName, 'bx--table-sort__svg');

  var sortContent = void 0;
  if (sortDir) {
    sortContent = sortDir === 'DESC' ? React.createElement(Icon, {
      name: 'caret--down',
      description: 'descending sort',
      className: iconClasses
    }) : React.createElement(Icon, {
      name: 'caret--up',
      description: 'ascending sort',
      className: iconClasses
    });
  } else {
    sortContent = '';
  }

  return React.createElement(
    'th',
    _extends({}, other, { className: tableHeaderClasses }),
    children,
    sortContent
  );
};

TableHeader.propTypes = propTypes;

export default TableHeader;