var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import ToolbarSearch from './ToolbarSearch';
import classNames from 'classnames';

var propTypes = {
  children: PropTypes.node,
  className: PropTypes.string
};

var toolbarItemPropTypes = {
  children: PropTypes.node,
  type: PropTypes.string,
  placeHolderText: PropTypes.string
};

var toolbarTitlePropTypes = {
  title: PropTypes.string
};

var toolbarTitleDefaultProps = {
  title: PropTypes.string
};

var toolbarItemDefaultProps = {
  placeHolderText: 'Provide placeHolderText'
};

var toolbarOptionPropTypes = {
  children: PropTypes.node
};

var Toolbar = function Toolbar(_ref) {
  var children = _ref.children,
      className = _ref.className,
      other = _objectWithoutProperties(_ref, ['children', 'className']);

  var wrapperClasses = classNames('bx--toolbar', className);

  return React.createElement(
    'div',
    _extends({ className: wrapperClasses }, other),
    children
  );
};

var ToolbarItem = function ToolbarItem(_ref2) {
  var children = _ref2.children,
      type = _ref2.type,
      placeHolderText = _ref2.placeHolderText;

  var toolbarItem = type === 'search' ? React.createElement(ToolbarSearch, { placeHolderText: placeHolderText }) : children;
  return toolbarItem;
};

var ToolbarTitle = function ToolbarTitle(_ref3) {
  var title = _ref3.title;
  return React.createElement(
    'li',
    { className: 'bx--toolbar-menu__title' },
    title
  );
};

var ToolbarOption = function ToolbarOption(_ref4) {
  var children = _ref4.children;
  return React.createElement(
    'li',
    { className: 'bx--toolbar-menu__option' },
    children
  );
};

var ToolbarDivider = function ToolbarDivider() {
  return React.createElement('hr', { className: 'bx--toolbar-menu__divider' });
};

Toolbar.propTypes = propTypes;
ToolbarItem.propTypes = toolbarItemPropTypes;
ToolbarTitle.propTypes = toolbarTitlePropTypes;
ToolbarOption.propTypes = toolbarOptionPropTypes;

ToolbarItem.defaultProps = toolbarItemDefaultProps;
ToolbarTitle.defaultProps = toolbarTitleDefaultProps;

export default Toolbar;
export { ToolbarItem, ToolbarTitle, ToolbarOption, ToolbarDivider };