var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import Icon from './Icon';
import classNames from 'classnames';

var propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  position: PropTypes.oneOf(['bottom', 'top']),
  text: PropTypes.string.isRequired,
  showIcon: PropTypes.bool,
  iconName: PropTypes.string,
  iconDescription: PropTypes.string
};

var defaultProps = {
  position: 'top',
  showIcon: true,
  iconName: 'info--glyph',
  iconDescription: 'tooltip',
  text: 'Provide text'
};

var TooltipSimple = function TooltipSimple(_ref) {
  var children = _ref.children,
      className = _ref.className,
      position = _ref.position,
      text = _ref.text,
      showIcon = _ref.showIcon,
      iconName = _ref.iconName,
      iconDescription = _ref.iconDescription,
      other = _objectWithoutProperties(_ref, ['children', 'className', 'position', 'text', 'showIcon', 'iconName', 'iconDescription']);

  var tooltipClasses = classNames('bx--tooltip--simple__' + position);

  var tooltipWrapperClasses = classNames('bx--tooltip--simple', className);
  return React.createElement(
    'div',
    { className: tooltipWrapperClasses },
    children,
    React.createElement(
      'div',
      _extends({ tabIndex: '0', className: tooltipClasses, 'data-tooltip-text': text }, other),
      showIcon && React.createElement(Icon, { name: iconName, description: iconDescription })
    )
  );
};

TooltipSimple.propTypes = propTypes;
TooltipSimple.defaultProps = defaultProps;

export default TooltipSimple;