var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';
import TableRow from './TableRow';

var propTypes = {
  children: PropTypes.node,
  className: PropTypes.string
};

/**
 * Adds striping to TableRows if the `even` prop wasn’t explicitly set.
 * @param  {array} rows  React elements that are children of the TableBody
 * @return {array}       the updated child elements
 */
var handleRowStriping = function handleRowStriping(rows) {
  var count = 0;

  return rows.map(function (child) {
    // Only make changes if it's a TableRow
    if (child.type === TableRow) {
      // manually increase the TableRow count
      count++;

      // Don’t override user-set `even` prop
      var even = 'even' in child.props ? child.props.even : count % 2 === 1;

      // Return a clone of the element with the `even` prop set.
      return React.cloneElement(child, { even: even });
    }

    return child;
  });
};

var TableBody = function TableBody(props) {
  var children = props.children,
      className = props.className,
      other = _objectWithoutProperties(props, ['children', 'className']);

  var tableBodyClasses = classNames(className, 'bx--table-body');

  var childArray = React.Children.toArray(children);
  var childrenWithProps = handleRowStriping(childArray);

  return React.createElement(
    'tbody',
    _extends({}, other, { className: tableBodyClasses }),
    childrenWithProps
  );
};

TableBody.propTypes = propTypes;

export default TableBody;