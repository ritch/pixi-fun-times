var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';
import Icon from './Icon';

var propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  id: PropTypes.string.isRequired,
  inline: PropTypes.bool,
  labelText: PropTypes.string,
  onChange: PropTypes.func,
  disabled: PropTypes.bool,
  defaultValue: PropTypes.any,
  iconDescription: PropTypes.string,
  hideLabel: PropTypes.bool
};

var defaultProps = {
  disabled: false,
  labelText: 'Select',
  inline: false,
  iconDescription: 'open list of options'
};

var Select = function Select(_ref) {
  var className = _ref.className,
      id = _ref.id,
      inline = _ref.inline,
      labelText = _ref.labelText,
      disabled = _ref.disabled,
      children = _ref.children,
      iconDescription = _ref.iconDescription,
      hideLabel = _ref.hideLabel,
      other = _objectWithoutProperties(_ref, ['className', 'id', 'inline', 'labelText', 'disabled', 'children', 'iconDescription', 'hideLabel']);

  var selectClasses = classNames(_defineProperty({
    'bx--select': true,
    'bx--select--inline': inline
  }, className, className));
  var labelClasses = classNames('bx--label', {
    'bx--visually-hidden': hideLabel
  });
  return React.createElement(
    'div',
    { className: 'bx--form-item' },
    !inline ? React.createElement(
      'label',
      { htmlFor: id, className: labelClasses },
      labelText
    ) : null,
    React.createElement(
      'div',
      { className: selectClasses },
      inline ? React.createElement(
        'label',
        { htmlFor: id, className: labelClasses },
        labelText
      ) : null,
      React.createElement(
        'select',
        _extends({}, other, { id: id, className: 'bx--select-input', disabled: disabled }),
        children
      ),
      React.createElement(Icon, { name: 'caret--down', className: 'bx--select__arrow', description: iconDescription })
    )
  );
};

Select.propTypes = propTypes;
Select.defaultProps = defaultProps;

export default Select;