var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React from 'react';
import RadioButton from './RadioButton';
import warning from 'warning';

var RadioButtonGroup = function (_React$Component) {
  _inherits(RadioButtonGroup, _React$Component);

  function RadioButtonGroup() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, RadioButtonGroup);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RadioButtonGroup.__proto__ || Object.getPrototypeOf(RadioButtonGroup)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      selected: null
    }, _this.getRadioButtons = function () {
      var children = React.Children.map(_this.props.children, function (radioButton) {
        var _radioButton$props = radioButton.props,
            value = _radioButton$props.value,
            other = _objectWithoutProperties(_radioButton$props, ['value']);
        /* istanbul ignore if */


        if (radioButton.props.hasOwnProperty('checked')) {
          warning(false, 'Instead of using the checked property on the RadioButton, set\n            the defaultSelected property or valueSelected property on the RadioButtonGroup.');
        }

        return React.createElement(RadioButton, _extends({}, other, {
          name: _this.props.name,
          key: value,
          value: value,
          onChange: _this.handleChange,
          checked: value === _this.state.selected
        }));
      });

      return children;
    }, _this.handleChange = function (newSelection, value, evt) {
      if (newSelection !== _this.state.selected) {
        _this.setState({ selected: newSelection });
        _this.props.onChange(newSelection, _this.props.name, evt);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(RadioButtonGroup, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.setState({
        selected: this.props.valueSelected || this.props.defaultSelected || null
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.hasOwnProperty('valueSelected')) {
        this.setState({
          selected: nextProps.valueSelected
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          disabled = _props.disabled,
          className = _props.className;


      return React.createElement(
        'div',
        { className: 'bx--form-item' },
        React.createElement(
          'div',
          { className: className, disabled: disabled },
          this.getRadioButtons()
        )
      );
    }
  }]);

  return RadioButtonGroup;
}(React.Component);

RadioButtonGroup.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  defaultSelected: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  name: PropTypes.string.isRequired,
  disabled: PropTypes.bool,
  onChange: PropTypes.func,
  valueSelected: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};
RadioButtonGroup.defaultProps = {
  onChange: /* istanbul ignore next */function onChange() {},
  className: 'bx--radio-button-group'
};


export default RadioButtonGroup;