var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import classNames from 'classnames';
import ClickListener from '../internal/ClickListener';
import Icon from './Icon';

var Dropdown = function (_PureComponent) {
  _inherits(Dropdown, _PureComponent);

  function Dropdown(props) {
    _classCallCheck(this, Dropdown);

    var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

    _this.close = function () {
      _this.setState({ open: false });
    };

    _this.toggle = function (evt) {
      // Open on click, enter, or space
      if (evt.which === 13 || evt.which === 32 || evt.type === 'click') {
        _this.setState({ open: !_this.state.open });
      }
    };

    _this.handleItemClick = function (info) {
      _this.props.onChange(info);
      _this.setState({
        selectedText: info.itemText,
        value: info.value
      });
    };

    var children = props.children,
        selectedText = props.selectedText,
        value = props.value,
        defaultText = props.defaultText,
        open = props.open;


    var matchingChild = void 0;
    React.Children.forEach(children, function (child) {
      if (child.props.itemText === selectedText || child.props.value === value) {
        matchingChild = child;
      }
    });

    if (matchingChild) {
      _this.state = {
        open: open,
        selectedText: matchingChild.props.itemText,
        value: matchingChild.props.value
      };
    } else {
      _this.state = {
        open: open,
        selectedText: defaultText,
        value: ''
      };
    }
    return _this;
  }

  _createClass(Dropdown, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          tabIndex = _props.tabIndex,
          defaultText = _props.defaultText,
          iconDescription = _props.iconDescription,
          other = _objectWithoutProperties(_props, ['tabIndex', 'defaultText', 'iconDescription']);

      var children = React.Children.map(this.props.children, function (child) {
        return React.cloneElement(child, {
          onClick: _this2.handleItemClick
        });
      });

      var dropdownClasses = classNames(_defineProperty({
        'bx--dropdown': true,
        'bx--dropdown--open': this.state.open
      }, this.props.className, this.props.className));

      var dropdown = React.createElement(
        ClickListener,
        { onClickOutside: this.close },
        React.createElement(
          'ul',
          _extends({}, other, {
            onClick: this.toggle,
            onKeyPress: this.toggle,
            value: this.state.value,
            className: dropdownClasses,
            tabIndex: tabIndex
          }),
          React.createElement(
            'li',
            { className: 'bx--dropdown-text' },
            this.state.selectedText
          ),
          React.createElement(
            'li',
            null,
            React.createElement(Icon, {
              name: 'caret--down',
              className: 'bx--dropdown__arrow',
              description: iconDescription
            })
          ),
          React.createElement(
            'li',
            null,
            React.createElement(
              'ul',
              { className: 'bx--dropdown-list' },
              children
            )
          )
        )
      );

      return dropdown;
    }
  }]);

  return Dropdown;
}(PureComponent);

Dropdown.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  defaultText: PropTypes.string,
  value: PropTypes.string,
  tabIndex: PropTypes.number,
  onClick: PropTypes.func,
  onChange: PropTypes.func.isRequired,
  selectedText: PropTypes.string,
  open: PropTypes.bool,
  iconDescription: PropTypes.string
};
Dropdown.defaultProps = {
  tabIndex: 0,
  open: false,
  iconDescription: 'open list of options',
  onChange: function onChange() {}
};


export default Dropdown;