var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';

var propTypes = {
  className: PropTypes.string,
  cols: PropTypes.number,
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  disabled: PropTypes.bool,
  id: PropTypes.string,
  labelText: PropTypes.string,
  onChange: PropTypes.func,
  onClick: PropTypes.func,
  placeholder: PropTypes.string,
  rows: PropTypes.number,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  invalid: PropTypes.bool,
  invalidText: PropTypes.string
};

var defaultProps = {
  disabled: false,
  onChange: function onChange() {},
  onClick: function onClick() {},
  placeholder: 'Hint text here',
  rows: 4,
  cols: 50,
  invalid: false,
  labelText: 'Provide labelText',
  invalidText: 'Provide invalidText'
};

var Textarea = function Textarea(_ref) {
  var className = _ref.className,
      id = _ref.id,
      labelText = _ref.labelText,
      _onChange = _ref.onChange,
      _onClick = _ref.onClick,
      invalid = _ref.invalid,
      invalidText = _ref.invalidText,
      other = _objectWithoutProperties(_ref, ['className', 'id', 'labelText', 'onChange', 'onClick', 'invalid', 'invalidText']);

  var textareaProps = {
    id: id,
    onChange: function onChange(evt) {
      if (!other.disabled) {
        _onChange(evt);
      }
    },
    onClick: function onClick(evt) {
      if (!other.disabled) {
        _onClick(evt);
      }
    }
  };

  var textareaClasses = classNames('bx--text-area', className);
  var label = labelText ? React.createElement(
    'label',
    { htmlFor: id, className: 'bx--label' },
    labelText
  ) : null;

  var error = invalid ? React.createElement(
    'div',
    { className: 'bx--form-requirement' },
    invalidText
  ) : null;

  var input = invalid ? React.createElement('textarea', _extends({}, other, textareaProps, { className: textareaClasses, 'data-invalid': true })) : React.createElement('textarea', _extends({}, other, textareaProps, { className: textareaClasses }));

  return React.createElement(
    'div',
    { className: 'bx--form-item' },
    label,
    input,
    error
  );
};

Textarea.propTypes = propTypes;
Textarea.defaultProps = defaultProps;

export default Textarea;