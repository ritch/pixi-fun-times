var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { Component } from 'react';
import classNames from 'classnames';
import Icon from './Icon';

var TimePickerSelect = function (_Component) {
  _inherits(TimePickerSelect, _Component);

  function TimePickerSelect() {
    _classCallCheck(this, TimePickerSelect);

    return _possibleConstructorReturn(this, (TimePickerSelect.__proto__ || Object.getPrototypeOf(TimePickerSelect)).apply(this, arguments));
  }

  _createClass(TimePickerSelect, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          id = _props.id,
          disabled = _props.disabled,
          children = _props.children,
          iconDescription = _props.iconDescription,
          className = _props.className,
          hideLabel = _props.hideLabel,
          labelText = _props.labelText,
          inline = _props.inline,
          other = _objectWithoutProperties(_props, ['id', 'disabled', 'children', 'iconDescription', 'className', 'hideLabel', 'labelText', 'inline']);

      var selectClasses = classNames(_defineProperty({
        'bx--select': true,
        'bx--time-picker__select': true,
        'bx--select--inline': true
      }, className, className));

      var labelClasses = classNames('bx--label', {
        'bx--visually-hidden': hideLabel
      });

      var label = labelText ? React.createElement(
        'label',
        { htmlFor: id, className: labelClasses },
        labelText
      ) : null;

      return React.createElement(
        'div',
        { className: selectClasses },
        label,
        React.createElement(
          'select',
          _extends({}, other, {
            id: id,
            className: 'bx--select-input',
            disabled: disabled
          }),
          children
        ),
        React.createElement(Icon, {
          name: 'caret--down',
          className: 'bx--select__arrow',
          description: iconDescription
        })
      );
    }
  }]);

  return TimePickerSelect;
}(Component);

TimePickerSelect.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  id: PropTypes.string.isRequired,
  inline: PropTypes.bool,
  disabled: PropTypes.bool,
  defaultValue: PropTypes.any,
  iconDescription: PropTypes.string,
  hideLabel: PropTypes.bool,
  labelText: PropTypes.string
};
TimePickerSelect.defaultProps = {
  disabled: false,
  inline: true,
  iconDescription: 'open list of options',
  hideLabel: true,
  labelText: 'Provide label text'
};
export default TimePickerSelect;