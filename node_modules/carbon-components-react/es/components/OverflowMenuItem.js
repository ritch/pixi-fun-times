var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';

var propTypes = {
  className: PropTypes.string,
  itemText: PropTypes.string.isRequired,
  hasDivider: PropTypes.bool,
  isDelete: PropTypes.bool,
  onBlur: PropTypes.func,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  onKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  onMouseDown: PropTypes.func,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  onMouseUp: PropTypes.func,
  closeMenu: PropTypes.func
};

var defaultProps = {
  hasDivider: false,
  isDelete: false,
  itemText: 'Provide itemText',
  onClick: function onClick() {}
};

var OverflowMenuItem = function OverflowMenuItem(_ref) {
  var className = _ref.className,
      itemText = _ref.itemText,
      hasDivider = _ref.hasDivider,
      isDelete = _ref.isDelete,
      closeMenu = _ref.closeMenu,
      onClick = _ref.onClick,
      other = _objectWithoutProperties(_ref, ['className', 'itemText', 'hasDivider', 'isDelete', 'closeMenu', 'onClick']);

  var overflowMenuBtnClasses = classNames([className], 'bx--overflow-menu-options__btn');

  var overflowMenuItemClasses = classNames('bx--overflow-menu-options__option', {
    'bx--overflow-menu--divider': hasDivider,
    'bx--overflow-menu-options__option--danger': isDelete
  });

  var handleClick = function handleClick(evt) {
    onClick(evt);
    closeMenu();
  };

  var item = React.createElement(
    'li',
    { className: overflowMenuItemClasses },
    React.createElement(
      'button',
      _extends({}, other, {
        type: 'button',
        className: overflowMenuBtnClasses,
        onClick: handleClick
      }),
      itemText
    )
  );

  return item;
};

OverflowMenuItem.propTypes = propTypes;
OverflowMenuItem.defaultProps = defaultProps;

export default OverflowMenuItem;