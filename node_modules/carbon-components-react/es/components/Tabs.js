var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';
import Icon from './Icon';
import TabContent from './TabContent';

var Tabs = function (_React$Component) {
  _inherits(Tabs, _React$Component);

  function Tabs() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tabs);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      dropdownHidden: true,
      selected: _this.props.selected,
      selectedLabel: React.Children.toArray(_this.props.children)[0].props.label
    }, _this.handleTabClick = function (index, label, evt) {
      evt.preventDefault();
      _this.setState({
        selected: index,
        selectedLabel: label,
        dropdownHidden: !_this.state.dropdownHidden
      });
    }, _this.handleTabKeyDown = function (index, label, evt) {
      var key = evt.key || evt.which;

      if (key === 'Enter' || key === 13 || key === ' ' || key === 32) {
        _this.setState({
          selected: index,
          selectedLabel: label,
          dropdownHidden: !_this.state.dropdownHidden
        });
      }
    }, _this.handleTabAnchorFocus = function (index) {
      var tabCount = React.Children.count(_this.props.children) - 1;

      if (index < 0) {
        var tab = _this.refs['tab' + tabCount];
        tab.refs.tabAnchor.focus();
        _this.setState({ selected: tabCount });
      } else if (index > tabCount) {
        var _tab = _this.refs.tab0;
        _tab.refs.tabAnchor.focus();
        _this.setState({ selected: 0 });
      } else {
        var _tab2 = _this.refs['tab' + index];
        _tab2.refs.tabAnchor.focus();
        _this.setState({ selected: index });
      }
    }, _this.handleDropdownClick = function () {
      _this.setState({
        dropdownHidden: !_this.state.dropdownHidden
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tabs, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref2) {
      var selected = _ref2.selected;

      if (selected !== this.props.selected) {
        this.setState({ selected: selected });
      }
    }
  }, {
    key: 'getTabs',
    value: function getTabs() {
      return React.Children.map(this.props.children, function (tab) {
        return tab;
      });
    }

    // following functions (handle*) are Props on Tab.js, see Tab.js for parameters

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          iconDescription = _props.iconDescription,
          className = _props.className,
          triggerHref = _props.triggerHref,
          role = _props.role,
          other = _objectWithoutProperties(_props, ['iconDescription', 'className', 'triggerHref', 'role']);

      var tabsWithProps = this.getTabs().map(function (tab, index) {
        var newTab = React.cloneElement(tab, {
          index: index,
          selected: index === _this2.state.selected,
          handleTabClick: _this2.handleTabClick,
          handleTabAnchorFocus: _this2.handleTabAnchorFocus,
          ref: 'tab' + index,
          handleTabKeyDown: _this2.handleTabKeyDown
        });

        return newTab;
      });

      var tabContentWithProps = React.Children.map(tabsWithProps, function (tab) {
        var _tab$props = tab.props,
            children = _tab$props.children,
            selected = _tab$props.selected;


        return React.createElement(
          TabContent,
          { className: 'tab-content', hidden: !selected, selected: selected },
          children
        );
      });

      var classes = {
        tabs: classNames('bx--tabs', className),
        tablist: classNames('bx--tabs__nav', {
          'bx--tabs__nav--hidden': this.state.dropdownHidden
        })
      };

      return React.createElement(
        'div',
        null,
        React.createElement(
          'nav',
          _extends({}, other, { className: classes.tabs, role: role }),
          React.createElement(
            'div',
            { className: 'bx--tabs-trigger', onClick: this.handleDropdownClick },
            React.createElement(
              'a',
              {
                className: 'bx--tabs-trigger-text',
                href: triggerHref,
                onClick: this.handleDropdownClick
              },
              this.state.selectedLabel
            ),
            React.createElement(Icon, { description: iconDescription, name: 'caret--down' })
          ),
          React.createElement(
            'ul',
            { role: 'tablist', className: classes.tablist },
            tabsWithProps
          )
        ),
        tabContentWithProps
      );
    }
  }]);

  return Tabs;
}(React.Component);

Tabs.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  firstSelectedLabel: PropTypes.string,
  hidden: PropTypes.bool,
  href: PropTypes.string.isRequired,
  role: PropTypes.string.isRequired,
  onClick: PropTypes.func,
  onKeyDown: PropTypes.func,
  triggerHref: PropTypes.string.isRequired,
  selected: PropTypes.number,
  iconDescription: PropTypes.string.isRequired
};
Tabs.defaultProps = {
  iconDescription: 'show menu options',
  role: 'navigation',
  href: '#',
  triggerHref: '#',
  selected: 0
};


export default Tabs;