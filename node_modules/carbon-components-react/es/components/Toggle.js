var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';

var propTypes = {
  className: PropTypes.string,
  defaultToggled: PropTypes.bool,
  onToggle: PropTypes.func,
  id: PropTypes.string.isRequired,
  toggled: PropTypes.bool,
  labelA: PropTypes.string.isRequired,
  labelB: PropTypes.string.isRequired
};

var defaultProps = {
  defaultToggled: false,
  labelA: 'Off',
  labelB: 'On',
  onToggle: function onToggle() {}
};

var Toggle = function Toggle(_ref) {
  var className = _ref.className,
      defaultToggled = _ref.defaultToggled,
      toggled = _ref.toggled,
      onToggle = _ref.onToggle,
      id = _ref.id,
      labelA = _ref.labelA,
      labelB = _ref.labelB,
      other = _objectWithoutProperties(_ref, ['className', 'defaultToggled', 'toggled', 'onToggle', 'id', 'labelA', 'labelB']);

  var input = void 0;
  var wrapperClasses = classNames(_defineProperty({
    'bx--form-item': true
  }, className, className));

  var checkedProps = {};

  if (typeof toggled !== 'undefined') {
    checkedProps.checked = toggled;
  } else {
    checkedProps.defaultChecked = defaultToggled;
  }

  return React.createElement(
    'div',
    { className: wrapperClasses },
    React.createElement('input', _extends({}, other, checkedProps, {
      type: 'checkbox',
      id: id,
      className: 'bx--toggle',
      onChange: function onChange(evt) {
        onToggle(input.checked, id, evt);
      },
      ref: function ref(el) {
        input = el;
      }
    })),
    React.createElement(
      'label',
      { className: 'bx--toggle__label', htmlFor: id },
      React.createElement(
        'span',
        { className: 'bx--toggle__text--left' },
        labelA
      ),
      React.createElement('span', { className: 'bx--toggle__appearance' }),
      React.createElement(
        'span',
        { className: 'bx--toggle__text--right' },
        labelB
      )
    )
  );
};

Toggle.propTypes = propTypes;
Toggle.defaultProps = defaultProps;

export default Toggle;