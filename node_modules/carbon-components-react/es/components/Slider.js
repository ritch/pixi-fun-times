var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import TextInput from './TextInput';

var Slider = function (_Component) {
  _inherits(Slider, _Component);

  function Slider() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Slider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Slider.__proto__ || Object.getPrototypeOf(Slider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      dragging: false,
      value: _this.props.value,
      left: 0
    }, _this.updatePosition = function (evt) {
      if (evt && _this.props.disabled) {
        return;
      }

      if (evt && evt.dispatchConfig) {
        evt.persist();
      }

      if (_this.state.dragging) {
        return;
      }

      _this.setState({ dragging: true });

      requestAnimationFrame(function () {
        _this.setState({ dragging: false });

        var _this$calcValue = _this.calcValue(evt),
            left = _this$calcValue.left,
            newValue = _this$calcValue.newValue;

        _this.setState({
          left: left,
          value: newValue
        });
      });
    }, _this.calcValue = function (evt) {
      var _this$props = _this.props,
          min = _this$props.min,
          max = _this$props.max,
          step = _this$props.step,
          stepMuliplier = _this$props.stepMuliplier;
      var value = _this.state.value;


      var range = max - min;
      var valuePercentage = (value - min) / range * 100;

      var left = void 0;
      var newValue = void 0;
      left = valuePercentage;
      newValue = value;

      if (evt) {
        var type = evt.type;


        if (type === 'keydown') {
          var direction = {
            40: -1, // decreasing
            37: -1, // decreasing
            38: 1, // increasing
            39: 1 // increasing
          }[evt.which];

          if (direction !== undefined) {
            var multiplier = evt.shiftKey === true ? range / step / stepMuliplier : 1;
            var stepMultiplied = step * multiplier;
            var stepSize = stepMultiplied / range * 100;
            left = valuePercentage + stepSize * direction;
            newValue = Number(value) + stepMultiplied * direction;
          }
        }
        if (type === 'mousemove' || type === 'click' || type === 'touchmove') {
          var clientX = evt.touches ? evt.touches[0].clientX : evt.clientX;
          var track = _this.track.getBoundingClientRect();
          var unrounded = (clientX - track.left) / track.width;
          var rounded = Math.round(range * unrounded / step) * step;
          left = (rounded - min) / range * 100;
          newValue = rounded;
        }
      }

      if (newValue <= Number(min)) {
        left = 0;
        newValue = min;
      }
      if (newValue >= Number(max)) {
        left = 100;
        newValue = max;
      }

      return { left: left, newValue: newValue };
    }, _this.handleMouseStart = function () {
      _this.element.ownerDocument.addEventListener('mousemove', _this.updatePosition);
      _this.element.ownerDocument.addEventListener('mouseup', _this.handleMouseEnd);
    }, _this.handleMouseEnd = function () {
      _this.element.ownerDocument.removeEventListener('mousemove', _this.updatePosition);
      _this.element.ownerDocument.removeEventListener('mouseup', _this.handleMouseEnd);
    }, _this.handleTouchStart = function () {
      _this.element.ownerDocument.addEventListener('touchmove', _this.updatePosition);
      _this.element.ownerDocument.addEventListener('touchup', _this.handleTouchEnd);
      _this.element.ownerDocument.addEventListener('touchend', _this.handleTouchEnd);
      _this.element.ownerDocument.addEventListener('touchcancel', _this.handleTouchEnd);
    }, _this.handleTouchEnd = function () {
      _this.element.ownerDocument.removeEventListener('touchmove', _this.updatePosition);
      _this.element.ownerDocument.removeEventListener('touchup', _this.handleTouchEnd);
      _this.element.ownerDocument.removeEventListener('touchend', _this.handleTouchEnd);
      _this.element.ownerDocument.removeEventListener('touchcancel', _this.handleTouchEnd);
    }, _this.handleChange = function (evt) {
      _this.setState({ value: evt.target.value });
      _this.updatePosition();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Slider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updatePosition();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps !== this.props) {
        this.updatePosition();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          hideTextInput = _props.hideTextInput,
          id = _props.id,
          _onChange = _props.onChange,
          min = _props.min,
          minLabel = _props.minLabel,
          max = _props.max,
          maxLabel = _props.maxLabel,
          labelText = _props.labelText,
          step = _props.step,
          stepMuliplier = _props.stepMuliplier,
          required = _props.required,
          disabled = _props.disabled,
          name = _props.name,
          other = _objectWithoutProperties(_props, ['className', 'hideTextInput', 'id', 'onChange', 'min', 'minLabel', 'max', 'maxLabel', 'labelText', 'step', 'stepMuliplier', 'required', 'disabled', 'name']);

      var _state = this.state,
          value = _state.value,
          left = _state.left;


      var sliderClasses = classNames('bx--slider', { 'bx--slider--disabled': disabled }, className);

      var filledTrackStyle = {
        transform: 'translate(0%, -50%) scaleX(' + left / 100 + ')'
      };
      var thumbStyle = {
        left: left + '%'
      };

      return React.createElement(
        'div',
        { className: 'bx--form-item' },
        React.createElement(
          'label',
          { htmlFor: id, className: 'bx--label' },
          labelText
        ),
        React.createElement(
          'div',
          { className: 'bx--slider-container' },
          React.createElement(
            'span',
            { className: 'bx--slider__range-label' },
            min,
            minLabel
          ),
          React.createElement(
            'div',
            _extends({
              className: sliderClasses,
              ref: function ref(node) {
                _this2.element = node;
              },
              onClick: function onClick(evt) {
                return _this2.updatePosition(evt);
              }
            }, other),
            React.createElement('div', {
              className: 'bx--slider__track',
              ref: function ref(node) {
                _this2.track = node;
              }
            }),
            React.createElement('div', { className: 'bx--slider__filled-track', style: filledTrackStyle }),
            React.createElement('div', {
              className: 'bx--slider__thumb',
              tabIndex: '0',
              style: thumbStyle,
              onMouseDown: function onMouseDown() {
                return _this2.handleMouseStart();
              },
              onTouchStart: function onTouchStart() {
                return _this2.handleTouchStart();
              },
              onKeyDown: function onKeyDown(evt) {
                return _this2.updatePosition(evt);
              }
            }),
            React.createElement('input', {
              id: id,
              type: 'hidden',
              name: name,
              value: value,
              required: required,
              min: min,
              max: max,
              step: step,
              onChange: function onChange(evt) {
                if (!disabled) {
                  _onChange(evt);
                }
              }
            })
          ),
          React.createElement(
            'span',
            { className: 'bx--slider__range-label' },
            max,
            maxLabel
          ),
          !hideTextInput ? React.createElement(TextInput, {
            id: 'input-for-slider',
            className: 'bx-slider-text-input',
            value: value,
            onChange: function onChange(evt) {
              return _this2.handleChange(evt);
            }
          }) : null
        )
      );
    }
  }]);

  return Slider;
}(Component);

Slider.propTypes = {
  className: PropTypes.string,
  hideTextInput: PropTypes.bool,
  id: PropTypes.string,
  onChange: PropTypes.func,
  value: PropTypes.number.isRequired,
  min: PropTypes.number.isRequired,
  minLabel: PropTypes.string,
  max: PropTypes.number.isRequired,
  maxLabel: PropTypes.string,
  labelText: PropTypes.string,
  step: PropTypes.number,
  stepMuliplier: PropTypes.number,
  children: PropTypes.node,
  disabled: PropTypes.bool,
  name: PropTypes.bool
};
Slider.defaultProps = {
  hideTextInput: false,
  stepMuliplier: 4,
  disabled: false,
  minLabel: '',
  maxLabel: ''
};


export default Slider;