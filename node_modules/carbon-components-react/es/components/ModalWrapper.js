var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React from 'react';
import Modal from './Modal';
import Button from './Button';

var ModalWrapper = function (_React$Component) {
  _inherits(ModalWrapper, _React$Component);

  function ModalWrapper() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ModalWrapper);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ModalWrapper.__proto__ || Object.getPrototypeOf(ModalWrapper)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      open: false
    }, _this.handleOpen = function () {
      _this.setState({
        open: true
      });
    }, _this.handleClose = function () {
      _this.setState({
        open: false
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ModalWrapper, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          id = _props.id,
          buttonTriggerText = _props.buttonTriggerText,
          modalLabel = _props.modalLabel,
          modalHeading = _props.modalHeading,
          passiveModal = _props.passiveModal,
          primaryButtonText = _props.primaryButtonText,
          secondaryButtonText = _props.secondaryButtonText,
          other = _objectWithoutProperties(_props, ['id', 'buttonTriggerText', 'modalLabel', 'modalHeading', 'passiveModal', 'primaryButtonText', 'secondaryButtonText']);

      var props = {
        id: id,
        modalLabel: modalLabel,
        modalHeading: modalHeading,
        passiveModal: passiveModal,
        primaryButtonText: primaryButtonText,
        secondaryButtonText: secondaryButtonText,
        open: this.state.open,
        onRequestClose: this.handleClose,
        onRequestSubmit: this.props.handleSubmit
      };

      return React.createElement(
        'div',
        {
          onKeyDown: function onKeyDown(evt) {
            if (evt.which === 27) {
              _this2.handleClose();
              _this2.props.onKeyDown(evt);
            }
          }
        },
        React.createElement(
          Button,
          { onClick: this.handleOpen },
          buttonTriggerText
        ),
        React.createElement(
          Modal,
          _extends({}, props, other),
          this.props.children
        )
      );
    }
  }]);

  return ModalWrapper;
}(React.Component);

ModalWrapper.propTypes = {
  status: PropTypes.string,
  handleOpen: PropTypes.func,
  children: PropTypes.node,
  id: PropTypes.string,
  buttonTriggerText: PropTypes.string,
  modalLabel: PropTypes.string,
  modalHeading: PropTypes.string,
  modalText: PropTypes.string,
  passiveModal: PropTypes.bool,
  withHeader: PropTypes.bool,
  modalBeforeContent: PropTypes.bool,
  primaryButtonText: PropTypes.string,
  secondaryButtonText: PropTypes.string,
  handleSubmit: PropTypes.func
};
ModalWrapper.defaultProps = {
  primaryButtonText: 'Save',
  secondaryButtonText: 'Cancel'
};


export default ModalWrapper;