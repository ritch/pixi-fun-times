var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Icon from './Icon';
import classNames from 'classnames';
import FloatingMenu from '../internal/FloatingMenu';

var Tooltip = function (_Component) {
  _inherits(Tooltip, _Component);

  function Tooltip() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      open: _this.props.open
    }, _this.getTriggerPosition = function () {
      var triggerPosition = _this.triggerEl.getBoundingClientRect();
      _this.setState({ triggerPosition: triggerPosition });
    }, _this.handleMouse = function (direction) {
      if (direction === 'over') {
        _this.getTriggerPosition();
        _this.setState({ open: true });
      } else {
        _this.setState({ open: false });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tooltip, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      requestAnimationFrame(function () {
        _this2.getTriggerPosition();
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          direction = _props.direction,
          triggerText = _props.triggerText,
          showIcon = _props.showIcon,
          iconName = _props.iconName,
          iconDescription = _props.iconDescription,
          other = _objectWithoutProperties(_props, ['children', 'className', 'direction', 'triggerText', 'showIcon', 'iconName', 'iconDescription']);

      var tooltipClasses = classNames('bx--tooltip', { 'bx--tooltip--shown': this.state.open }, className);

      var menuOffset = { left: 5, top: 10 };

      return React.createElement(
        'div',
        null,
        showIcon ? React.createElement(
          'div',
          { className: 'bx--tooltip__trigger' },
          triggerText,
          React.createElement(
            'div',
            {
              ref: function ref(node) {
                _this3.triggerEl = node;
              },
              onMouseOver: function onMouseOver() {
                return _this3.handleMouse('over');
              },
              onMouseOut: function onMouseOut() {
                return _this3.handleMouse('out');
              },
              onFocus: function onFocus() {
                return _this3.handleMouse('over');
              },
              onBlur: function onBlur() {
                return _this3.handleMouse('out');
              }
            },
            React.createElement(Icon, { name: iconName, description: iconDescription, tabIndex: '0' })
          )
        ) : React.createElement(
          'div',
          {
            className: 'bx--tooltip__trigger',
            ref: function ref(node) {
              _this3.triggerEl = node;
            },
            onMouseOver: function onMouseOver() {
              return _this3.handleMouse('over');
            },
            onMouseOut: function onMouseOut() {
              return _this3.handleMouse('out');
            },
            onFocus: function onFocus() {
              return _this3.handleMouse('over');
            },
            onBlur: function onBlur() {
              return _this3.handleMouse('out');
            }
          },
          triggerText
        ),
        React.createElement(
          FloatingMenu,
          {
            menuPosition: this.state.triggerPosition,
            menuDirection: direction,
            menuOffset: menuOffset
          },
          React.createElement(
            'div',
            _extends({
              className: tooltipClasses
            }, other, {
              'data-floating-menu-direction': direction
            }),
            children
          )
        )
      );
    }
  }]);

  return Tooltip;
}(Component);

Tooltip.propTypes = {
  open: PropTypes.bool,
  children: PropTypes.node,
  className: PropTypes.string,
  direction: PropTypes.oneOf(['bottom', 'top']),
  triggerText: PropTypes.string,
  showIcon: PropTypes.bool,
  iconName: PropTypes.string,
  iconDescription: PropTypes.string
};
Tooltip.defaultProps = {
  open: false,
  direction: 'bottom',
  showIcon: true,
  iconName: 'info--glyph',
  iconDescription: 'tooltip',
  triggerText: 'Provide triggerText'
};


export default Tooltip;