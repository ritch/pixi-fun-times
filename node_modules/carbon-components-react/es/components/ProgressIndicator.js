var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import PropTypes from 'prop-types';
import React, { Component } from 'react';
import classnames from 'classnames';

var propTypes = {
  label: PropTypes.string,
  className: PropTypes.string,
  current: PropTypes.bool,
  complete: PropTypes.bool,
  incomplete: PropTypes.bool,
  description: PropTypes.string
};

var defaultProps = {
  label: 'Provide label'
};

var ProgressStep = function ProgressStep(_ref) {
  var props = _objectWithoutProperties(_ref, []);

  var label = props.label,
      description = props.description,
      className = props.className,
      current = props.current,
      complete = props.complete,
      incomplete = props.incomplete;


  var classes = classnames(_defineProperty({
    'bx--progress-step': true,
    'bx--progress-step--current': current,
    'bx--progress-step--complete': complete,
    'bx--progress-step--incomplete': incomplete
  }, className, className));

  return React.createElement(
    'li',
    { className: classes },
    React.createElement(
      'svg',
      null,
      React.createElement(
        'title',
        null,
        description
      ),
      current ? React.createElement(
        'g',
        null,
        React.createElement('circle', {
          stroke: '#3d70b2',
          strokeWidth: '5',
          fill: 'transparent',
          cx: '12',
          cy: '12',
          r: '12'
        }),
        React.createElement('circle', { fill: '#3d70b2', cx: '12', cy: '12', r: '6' })
      ) : null,
      complete ? React.createElement(
        'g',
        null,
        React.createElement('circle', { cx: '12', cy: '12', r: '12' }),
        React.createElement('polygon', { points: '10.3 13.6 7.7 11 6.3 12.4 10.3 16.4 17.8 9 16.4 7.6' })
      ) : null,
      incomplete ? React.createElement('circle', { cx: '12', cy: '12', r: '12' }) : null
    ),
    React.createElement(
      'p',
      { className: 'bx--progress-label' },
      label
    ),
    React.createElement('span', { className: 'bx--progress-line' })
  );
};

ProgressStep.propTypes = propTypes;
ProgressStep.defaultProps = defaultProps;

var ProgressIndicator = function (_Component) {
  _inherits(ProgressIndicator, _Component);

  function ProgressIndicator() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, ProgressIndicator);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = ProgressIndicator.__proto__ || Object.getPrototypeOf(ProgressIndicator)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
      currentIndex: _this.props.currentIndex
    }, _this.renderSteps = function () {
      return React.Children.map(_this.props.children, function (child, index) {
        if (index === _this.state.currentIndex) {
          return React.cloneElement(child, {
            current: true
          });
        } else if (index < _this.state.currentIndex) {
          return React.cloneElement(child, {
            complete: true
          });
        } else if (index > _this.state.currentIndex) {
          return React.cloneElement(child, {
            incomplete: true
          });
        }
        return null;
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ProgressIndicator, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.currentIndex !== this.props.currentIndex) {
        this.setState({ currentIndex: nextProps.currentIndex });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          currentIndex = _props.currentIndex,
          other = _objectWithoutProperties(_props, ['className', 'currentIndex']);

      var classes = classnames(_defineProperty({
        'bx--progress': true
      }, className, className));
      if (currentIndex) {
        return React.createElement(
          'ul',
          _extends({ className: classes }, other),
          this.renderSteps()
        );
      }

      return null;
    }
  }]);

  return ProgressIndicator;
}(Component);

ProgressIndicator.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  currentIndex: PropTypes.number
};
ProgressIndicator.defaultProps = {
  currentIndex: 0
};


export { ProgressIndicator, ProgressStep };