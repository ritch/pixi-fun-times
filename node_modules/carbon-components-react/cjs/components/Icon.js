'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.icons = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.findIcon = findIcon;
exports.getSvgData = getSvgData;
exports.svgShapes = svgShapes;
exports.isPrefixed = isPrefixed;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _carbonIcons = require('carbon-icons');

var _carbonIcons2 = _interopRequireDefault(_carbonIcons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var propTypes = {
  className: _propTypes2.default.string,
  description: _propTypes2.default.string.isRequired,
  fill: _propTypes2.default.string,
  fillRule: _propTypes2.default.string,
  height: _propTypes2.default.string,
  name: _propTypes2.default.string.isRequired,
  role: _propTypes2.default.string,
  style: _propTypes2.default.object,
  viewBox: _propTypes2.default.string,
  width: _propTypes2.default.string
};

var defaultProps = {
  fillRule: 'evenodd',
  role: 'img',
  description: 'Provide a description that will be used as the title'
};

/**
 * Returns a single icon Object
 * @param {string} iconName - "name" property of icon
 * @param {Object} [iconsObj=icons] - JSON Array of Objects
 * @example
 * // Returns a single icon Object
 * this.findIcon('copy-code', icons.json);
 */
function findIcon(name) {
  var iconsObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _carbonIcons2.default;

  var icon = iconsObj.filter(function (obj) {
    return obj.name === name;
  });

  if (icon.length === 0) {
    return false;
  } else if (icon.length > 1) {
    throw new Error('Multiple icons found...');
  } else {
    return icon[0];
  }
}

/**
 * Returns "svgData" Object
 * @param {string} iconName - "name" property of icon
 * @example
 * // Returns svgData Object for given iconName
 * this.getSvgData('copy-code');
 */
function getSvgData(iconName) {
  var name = findIcon(iconName);
  return name ? name.svgData : false;
}

/**
 * Returns Elements/Nodes for SVG
 * @param {Object} svgData - JSON Object for an SVG icon
 * @example
 * // Returns SVG elements
 * const svgData = getSvgData('copy-code');
 * svgShapes(svgData);
 */
function svgShapes(svgData) {
  var svgElements = Object.keys(svgData).filter(function (key) {
    return svgData[key];
  }).map(function (svgProp) {
    var data = svgData[svgProp];

    if (svgProp === 'circles') {
      return data.map(function (circle) {
        var circleProps = {
          cx: circle.cx,
          cy: circle.cy,
          r: circle.r
        };

        return _react2.default.createElement('circle', circleProps);
      });
    } else if (svgProp === 'paths') {
      return data.map(function (path) {
        return _react2.default.createElement('path', { d: path.d });
      });
    }

    return '';
  });

  return svgElements;
}

function isPrefixed(name) {
  return name.split('--')[0] === 'icon';
}

var Icon = function Icon(_ref) {
  var className = _ref.className,
      description = _ref.description,
      fill = _ref.fill,
      fillRule = _ref.fillRule,
      height = _ref.height,
      name = _ref.name,
      role = _ref.role,
      style = _ref.style,
      width = _ref.width,
      other = _objectWithoutProperties(_ref, ['className', 'description', 'fill', 'fillRule', 'height', 'name', 'role', 'style', 'width']);

  var icon = isPrefixed(name) ? findIcon(name) : findIcon('icon--' + name);

  var props = _extends({
    className: className,
    fill: fill,
    fillRule: fillRule,
    height: height || icon.height,
    name: isPrefixed ? name : 'icon--' + name,
    role: role,
    style: style,
    viewBox: icon.viewBox,
    width: width || icon.width
  }, other);

  var svgContent = icon ? svgShapes(icon.svgData) : '';

  return _react2.default.createElement(
    'svg',
    _extends({}, props, { 'aria-label': description }),
    _react2.default.createElement(
      'title',
      null,
      description
    ),
    svgContent
  );
};

Icon.propTypes = propTypes;
Icon.defaultProps = defaultProps;

exports.icons = _carbonIcons2.default;
exports.default = Icon;