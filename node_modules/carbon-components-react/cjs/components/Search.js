'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Search = function (_Component) {
  _inherits(Search, _Component);

  function Search() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Search);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Search.__proto__ || Object.getPrototypeOf(Search)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      format: 'list',
      hasContent: _this.props.value || _this.props.defaultValue || false
    }, _this.clearInput = function (evt) {
      if (!_this.props.value) {
        _this.input.value = '';
        _this.props.onChange(evt);
      } else {
        var clearedEvt = _extends({}, evt.target, {
          target: {
            value: ''
          }
        });
        _this.props.onChange(clearedEvt);
      }

      _this.setState({ hasContent: false }, function () {
        return _this.input.focus();
      });
    }, _this.toggleLayout = function () {
      if (_this.state.format === 'list') {
        _this.setState({
          format: 'grid'
        });
      } else {
        _this.setState({
          format: 'list'
        });
      }
    }, _this.handleChange = function (evt) {
      _this.setState({
        hasContent: evt.target.value !== ''
      });

      _this.props.onChange(evt);
    }, _this.searchFilterBtn = function () {
      if (!_this.props.small) {
        return _react2.default.createElement(
          'button',
          {
            className: 'bx--search-button',
            type: 'button',
            'aria-label': _this.props.searchButtonLabelText
          },
          _react2.default.createElement(_Icon2.default, { name: 'filter--glyph', description: 'filter', className: 'bx--search-filter' })
        );
      }
    }, _this.searchLayoutBtn = function () {
      if (!_this.props.small) {
        return _react2.default.createElement(
          'button',
          {
            className: 'bx--search-button',
            type: 'button',
            onClick: _this.toggleLayout,
            'aria-label': _this.props.layoutButtonLabelText
          },
          _this.state.format === 'list' ? _react2.default.createElement(
            'div',
            { className: 'bx--search__toggle-layout__container' },
            _react2.default.createElement(_Icon2.default, { name: 'list', description: 'list', className: 'bx--search-view' })
          ) : _react2.default.createElement(
            'div',
            { className: 'bx--search__toggle-layout__container' },
            _react2.default.createElement(_Icon2.default, {
              name: 'grid',
              description: 'toggle-layout',
              className: 'bx--search-view'
            })
          )
        );
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // eslint-disable-next-line consistent-return


  // eslint-disable-next-line consistent-return


  _createClass(Search, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          type = _props.type,
          id = _props.id,
          placeHolderText = _props.placeHolderText,
          labelText = _props.labelText,
          small = _props.small,
          other = _objectWithoutProperties(_props, ['className', 'type', 'id', 'placeHolderText', 'labelText', 'small']);

      var hasContent = this.state.hasContent;


      var searchClasses = (0, _classnames2.default)(_defineProperty({
        'bx--search bx--search-with-options': true,
        'bx--search--lg': !small,
        'bx--search--sm': small
      }, className, className));

      var clearClasses = (0, _classnames2.default)({
        'bx--search-close': true,
        'bx--search-close--hidden': !hasContent
      });

      return _react2.default.createElement(
        'div',
        { className: searchClasses, role: 'search' },
        _react2.default.createElement(_Icon2.default, {
          name: 'search--glyph',
          description: 'search',
          className: 'bx--search-magnifier'
        }),
        _react2.default.createElement(
          'label',
          { htmlFor: id, className: 'bx--label' },
          labelText
        ),
        _react2.default.createElement('input', _extends({}, other, {
          type: type,
          className: 'bx--search-input',
          id: id,
          placeholder: placeHolderText,
          onChange: this.handleChange,
          ref: function ref(input) {
            _this2.input = input;
          }
        })),
        _react2.default.createElement(_Icon2.default, {
          name: 'close--glyph',
          description: 'close',
          className: clearClasses,
          onClick: this.clearInput
        }),
        this.searchFilterBtn(),
        this.searchLayoutBtn()
      );
    }
  }]);

  return Search;
}(_react.Component);

Search.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  type: _propTypes2.default.string,
  small: _propTypes2.default.bool,
  placeHolderText: _propTypes2.default.string,
  labelText: _propTypes2.default.string,
  id: _propTypes2.default.string,
  searchButtonLabelText: _propTypes2.default.string,
  layoutButtonLabelText: _propTypes2.default.string
};
Search.defaultProps = {
  type: 'text',
  small: false,
  placeHolderText: '',
  onChange: function onChange() {},
  labelText: 'Provide labelText'
};
exports.default = Search;