'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  position: _propTypes2.default.oneOf(['bottom', 'top']),
  text: _propTypes2.default.string.isRequired,
  showIcon: _propTypes2.default.bool,
  iconName: _propTypes2.default.string,
  iconDescription: _propTypes2.default.string
};

var defaultProps = {
  position: 'top',
  showIcon: true,
  iconName: 'info--glyph',
  iconDescription: 'tooltip',
  text: 'Provide text'
};

var TooltipSimple = function TooltipSimple(_ref) {
  var children = _ref.children,
      className = _ref.className,
      position = _ref.position,
      text = _ref.text,
      showIcon = _ref.showIcon,
      iconName = _ref.iconName,
      iconDescription = _ref.iconDescription,
      other = _objectWithoutProperties(_ref, ['children', 'className', 'position', 'text', 'showIcon', 'iconName', 'iconDescription']);

  var tooltipClasses = (0, _classnames2.default)('bx--tooltip--simple__' + position);

  var tooltipWrapperClasses = (0, _classnames2.default)('bx--tooltip--simple', className);
  return _react2.default.createElement(
    'div',
    { className: tooltipWrapperClasses },
    children,
    _react2.default.createElement(
      'div',
      _extends({ tabIndex: '0', className: tooltipClasses, 'data-tooltip-text': text }, other),
      showIcon && _react2.default.createElement(_Icon2.default, { name: iconName, description: iconDescription })
    )
  );
};

TooltipSimple.propTypes = propTypes;
TooltipSimple.defaultProps = defaultProps;

exports.default = TooltipSimple;