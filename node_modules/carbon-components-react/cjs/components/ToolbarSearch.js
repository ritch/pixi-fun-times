'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _ClickListener = require('../internal/ClickListener');

var _ClickListener2 = _interopRequireDefault(_ClickListener);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ToolbarSearch = function (_Component) {
  _inherits(ToolbarSearch, _Component);

  function ToolbarSearch() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ToolbarSearch);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ToolbarSearch.__proto__ || Object.getPrototypeOf(ToolbarSearch)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      expanded: false
    }, _this.expandSearch = function () {
      _this.setState({
        expanded: !_this.state.expanded
      });
      _this.input.focus();
    }, _this.handleClickOutside = function () {
      _this.setState({
        expanded: false
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ToolbarSearch, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          type = _props.type,
          id = _props.id,
          placeHolderText = _props.placeHolderText,
          labelText = _props.labelText,
          role = _props.role,
          other = _objectWithoutProperties(_props, ['className', 'type', 'id', 'placeHolderText', 'labelText', 'role']);

      var searchClasses = (0, _classnames2.default)(_defineProperty({
        'bx--search bx--search--sm bx--toolbar-search': true,
        'bx--toolbar-search--active': this.state.expanded
      }, className, className));

      return _react2.default.createElement(
        _ClickListener2.default,
        { onClickOutside: this.handleClickOutside },
        _react2.default.createElement(
          'div',
          { className: searchClasses, role: role },
          _react2.default.createElement(
            'label',
            { htmlFor: id, className: 'bx--label' },
            labelText
          ),
          _react2.default.createElement('input', _extends({}, other, {
            type: type,
            className: 'bx--search-input',
            id: id,
            placeholder: placeHolderText,
            ref: function ref(input) {
              _this2.input = input;
            }
          })),
          _react2.default.createElement(
            'button',
            { className: 'bx--toolbar-search__btn', onClick: this.expandSearch },
            _react2.default.createElement(_Icon2.default, {
              name: 'search--glyph',
              description: 'search',
              className: 'bx--search-magnifier'
            })
          )
        )
      );
    }
  }]);

  return ToolbarSearch;
}(_react.Component);

ToolbarSearch.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  type: _propTypes2.default.string,
  small: _propTypes2.default.bool,
  placeHolderText: _propTypes2.default.string,
  labelText: _propTypes2.default.string,
  id: _propTypes2.default.string
};
ToolbarSearch.defaultProps = {
  type: 'search',
  id: 'search__input',
  labelText: 'Provide labelText',
  placeHolderText: 'Provide placeHolderText',
  role: 'search'
};
exports.default = ToolbarSearch;