'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Notification = function (_Component) {
  _inherits(Notification, _Component);

  function Notification() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Notification);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Notification.__proto__ || Object.getPrototypeOf(Notification)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      open: true
    }, _this.handleCloseButtonClick = function (evt) {
      _this.setState({ open: false });
      _this.props.onCloseButtonClick(evt);
    }, _this.useIconName = function (kindProp) {
      var isSuccess = kindProp === 'success';
      return isSuccess ? 'checkmark--glyph' : kindProp + '--glyph';
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Notification, [{
    key: 'render',
    value: function render() {
      if (!this.state.open) {
        return null;
      }

      var _props = this.props,
          onCloseButtonClick = _props.onCloseButtonClick,
          iconDescription = _props.iconDescription,
          className = _props.className,
          caption = _props.caption,
          subtitle = _props.subtitle,
          title = _props.title,
          kind = _props.kind,
          other = _objectWithoutProperties(_props, ['onCloseButtonClick', 'iconDescription', 'className', 'caption', 'subtitle', 'title', 'kind']);

      var notificationClasses = {
        toast: (0, _classnames2.default)('bx--toast-notification', _defineProperty({}, 'bx--toast-notification--' + this.props.kind, this.props.kind), className),
        inline: (0, _classnames2.default)('bx--inline-notification', _defineProperty({}, 'bx--inline-notification--' + this.props.kind, this.props.kind), className)
      };

      var commonProps = {
        alert: {
          role: 'alert',
          kind: kind
        },
        button: {
          type: 'button',
          onClick: this.handleCloseButtonClick
        }
      };

      var toastHTML = _react2.default.createElement(
        'div',
        _extends({}, other, commonProps.alert, { className: notificationClasses.toast }),
        _react2.default.createElement(
          'div',
          { className: 'bx--toast-notification__details' },
          _react2.default.createElement(
            'h3',
            { className: 'bx--toast-notification__title' },
            title
          ),
          _react2.default.createElement(
            'p',
            { className: 'bx--toast-notification__subtitle' },
            subtitle
          ),
          _react2.default.createElement(
            'p',
            { className: 'bx--toast-notification__caption' },
            caption
          )
        ),
        _react2.default.createElement(
          'button',
          _extends({}, commonProps.button, { className: 'bx--toast-notification__close-button' }),
          _react2.default.createElement(_Icon2.default, {
            description: this.props.iconDescription,
            className: 'bx--toast-notification__icon',
            'aria-label': 'close',
            name: 'close'
          })
        )
      );

      var inlineHTML = _react2.default.createElement(
        'div',
        _extends({}, other, commonProps.alert, { className: notificationClasses.inline }),
        _react2.default.createElement(
          'div',
          { className: 'bx--inline-notification__details' },
          _react2.default.createElement(_Icon2.default, {
            description: this.props.iconDescription,
            className: 'bx--inline-notification__icon',
            'aria-label': 'close',
            name: this.useIconName(kind)
          }),
          _react2.default.createElement(
            'div',
            { className: 'bx--inline-notification__text-wrapper' },
            _react2.default.createElement(
              'p',
              { className: 'bx--inline-notification__title' },
              title
            ),
            _react2.default.createElement(
              'p',
              { className: 'bx--inline-notification__subtitle' },
              subtitle
            )
          )
        ),
        _react2.default.createElement(
          'button',
          _extends({}, commonProps.button, { className: 'bx--inline-notification__close-button' }),
          _react2.default.createElement(_Icon2.default, {
            description: this.props.iconDescription,
            className: 'bx--inline-notification__close-icon',
            'aria-label': 'close',
            name: 'close'
          })
        )
      );

      return caption ? toastHTML : inlineHTML;
    }
  }]);

  return Notification;
}(_react.Component);

Notification.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  kind: _propTypes2.default.oneOf(['error', 'info', 'success', 'warning']).isRequired,
  title: _propTypes2.default.string.isRequired,
  subtitle: _propTypes2.default.string.isRequired,
  caption: _propTypes2.default.string,
  onCloseButtonClick: _propTypes2.default.func,
  iconDescription: _propTypes2.default.string.isRequired
};
Notification.defaultProps = {
  onCloseButtonClick: function onCloseButtonClick() {},
  iconDescription: 'closes notification',
  title: 'Provide a title',
  subtitle: 'Provide a subtitle'
};
exports.default = Notification;