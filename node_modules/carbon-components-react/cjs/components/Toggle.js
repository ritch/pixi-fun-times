'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var propTypes = {
  className: _propTypes2.default.string,
  defaultToggled: _propTypes2.default.bool,
  onToggle: _propTypes2.default.func,
  id: _propTypes2.default.string.isRequired,
  toggled: _propTypes2.default.bool,
  labelA: _propTypes2.default.string.isRequired,
  labelB: _propTypes2.default.string.isRequired
};

var defaultProps = {
  defaultToggled: false,
  labelA: 'Off',
  labelB: 'On',
  onToggle: function onToggle() {}
};

var Toggle = function Toggle(_ref) {
  var className = _ref.className,
      defaultToggled = _ref.defaultToggled,
      toggled = _ref.toggled,
      onToggle = _ref.onToggle,
      id = _ref.id,
      labelA = _ref.labelA,
      labelB = _ref.labelB,
      other = _objectWithoutProperties(_ref, ['className', 'defaultToggled', 'toggled', 'onToggle', 'id', 'labelA', 'labelB']);

  var input = void 0;
  var wrapperClasses = (0, _classnames2.default)(_defineProperty({
    'bx--form-item': true
  }, className, className));

  var checkedProps = {};

  if (typeof toggled !== 'undefined') {
    checkedProps.checked = toggled;
  } else {
    checkedProps.defaultChecked = defaultToggled;
  }

  return _react2.default.createElement(
    'div',
    { className: wrapperClasses },
    _react2.default.createElement('input', _extends({}, other, checkedProps, {
      type: 'checkbox',
      id: id,
      className: 'bx--toggle',
      onChange: function onChange(evt) {
        onToggle(input.checked, id, evt);
      },
      ref: function ref(el) {
        input = el;
      }
    })),
    _react2.default.createElement(
      'label',
      { className: 'bx--toggle__label', htmlFor: id },
      _react2.default.createElement(
        'span',
        { className: 'bx--toggle__text--left' },
        labelA
      ),
      _react2.default.createElement('span', { className: 'bx--toggle__appearance' }),
      _react2.default.createElement(
        'span',
        { className: 'bx--toggle__text--right' },
        labelB
      )
    )
  );
};

Toggle.propTypes = propTypes;
Toggle.defaultProps = defaultProps;

exports.default = Toggle;