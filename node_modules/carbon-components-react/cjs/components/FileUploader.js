'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Filename = exports.FileUploaderButton = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _uniqueId = require('../lib/uniqueId');

var _uniqueId2 = _interopRequireDefault(_uniqueId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint react/no-multi-comp: "off" */


var FileUploaderButton = function (_Component) {
  _inherits(FileUploaderButton, _Component);

  function FileUploaderButton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FileUploaderButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FileUploaderButton.__proto__ || Object.getPrototypeOf(FileUploaderButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      labelText: _this.props.labelText
    }, _this.handleChange = function (evt) {
      var files = evt.target.files;
      var length = evt.target.files.length;
      if (files && !_this.props.disableLabelChanges) {
        if (length > 1) {
          _this.setState({ labelText: length + ' files' });
        } else if (length === 1) {
          _this.setState({ labelText: files[0].name });
        }
      }
      _this.props.onChange(evt);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FileUploaderButton, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.uid = this.props.id || (0, _uniqueId2.default)();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.labelText !== this.props.labelText) {
        this.setState({ labelText: nextProps.labelText });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          disableLabelChanges = _props.disableLabelChanges,
          labelText = _props.labelText,
          multiple = _props.multiple,
          role = _props.role,
          tabIndex = _props.tabIndex,
          other = _objectWithoutProperties(_props, ['className', 'disableLabelChanges', 'labelText', 'multiple', 'role', 'tabIndex']);

      var classes = (0, _classnames2.default)(_defineProperty({
        'bx--file': true
      }, className, className));

      return _react2.default.createElement(
        'div',
        {
          className: classes,
          tabIndex: tabIndex,
          onKeyDown: function onKeyDown(evt) {
            if (evt.which === 13 || evt.which === 32) {
              _this2.input.click();
            }
          }
        },
        _react2.default.createElement(
          'label',
          _extends({
            className: 'bx--btn bx--btn--primary',
            htmlFor: this.uid,
            role: role
          }, other),
          this.state.labelText
        ),
        _react2.default.createElement('input', {
          hidden: true,
          ref: function ref(input) {
            return _this2.input = input;
          },
          id: this.uid,
          type: 'file',
          multiple: multiple,
          onChange: this.handleChange
        })
      );
    }
  }]);

  return FileUploaderButton;
}(_react.Component);

FileUploaderButton.propTypes = {
  className: _propTypes2.default.string,
  disableLabelChanges: _propTypes2.default.bool,
  id: _propTypes2.default.string,
  labelText: _propTypes2.default.string,
  listFiles: _propTypes2.default.bool,
  multiple: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  onClick: _propTypes2.default.func,
  role: _propTypes2.default.string,
  tabIndex: _propTypes2.default.number
};
FileUploaderButton.defaultProps = {
  tabIndex: 0,
  disableLabelChanges: false,
  labelText: 'Add file',
  multiple: false,
  onChange: function onChange() {},
  onClick: function onClick() {},
  role: 'button'
};

var Filename = function (_Component2) {
  _inherits(Filename, _Component2);

  function Filename() {
    _classCallCheck(this, Filename);

    return _possibleConstructorReturn(this, (Filename.__proto__ || Object.getPrototypeOf(Filename)).apply(this, arguments));
  }

  _createClass(Filename, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          iconDescription = _props2.iconDescription,
          status = _props2.status,
          style = _props2.style,
          tabIndex = _props2.tabIndex,
          onKeyDown = _props2.onKeyDown,
          other = _objectWithoutProperties(_props2, ['iconDescription', 'status', 'style', 'tabIndex', 'onKeyDown']);

      var tempStyle = _extends(style, { marginRight: '-1px' }); // temp style correction for loading component position
      return _react2.default.createElement(
        'span',
        null,
        status === 'uploading' ? _react2.default.createElement(
          'div',
          _extends({ className: 'bx--loading', style: tempStyle }, other),
          _react2.default.createElement(
            'svg',
            { className: 'bx--loading__svg', viewBox: '-42 -42 84 84' },
            _react2.default.createElement('circle', { cx: '0', cy: '0', r: '37.5' })
          )
        ) : null,
        status === 'edit' ? _react2.default.createElement(_Icon2.default, _extends({
          className: 'bx--file-close',
          name: 'close--glyph',
          description: iconDescription,
          style: style,
          tabIndex: tabIndex,
          onKeyDown: onKeyDown
        }, other)) : null,
        status === 'complete' ? _react2.default.createElement(_Icon2.default, _extends({
          className: 'bx--file-complete',
          name: 'checkmark--glyph',
          description: iconDescription,
          style: style
        }, other)) : null
      );
    }
  }]);

  return Filename;
}(_react.Component);

Filename.propTypes = {
  style: _propTypes2.default.object,
  status: _propTypes2.default.oneOf(['edit', 'complete', 'uploading']),
  tabIndex: _propTypes2.default.number,
  onKeyDown: _propTypes2.default.func
};
Filename.defaultProps = {
  onKeyDown: function onKeyDown() {},
  status: 'uploading',
  style: {},
  tabIndex: 0
};

var FileUploader = function (_Component3) {
  _inherits(FileUploader, _Component3);

  function FileUploader() {
    var _ref2;

    var _temp2, _this4, _ret2;

    _classCallCheck(this, FileUploader);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this4 = _possibleConstructorReturn(this, (_ref2 = FileUploader.__proto__ || Object.getPrototypeOf(FileUploader)).call.apply(_ref2, [this].concat(args))), _this4), _this4.state = {
      filenames: [],
      filenameStatus: ''
    }, _this4.nodes = [], _this4.handleChange = function (evt) {
      _this4.setState({ filenames: [].concat(_toConsumableArray(evt.target.files)).map(function (file) {
          return file.name;
        }) });
      _this4.props.onChange(evt);
    }, _this4.handleClick = function (evt, index) {
      var filteredArray = _this4.state.filenames.filter(function (filename) {
        return filename !== _this4.nodes[index].innerText.trim();
      });
      _this4.setState({ filenames: filteredArray });
      _this4.props.onClick(evt);
    }, _temp2), _possibleConstructorReturn(_this4, _ret2);
  }

  _createClass(FileUploader, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.filenameStatus !== this.props.filenameStatus) {
        this.setState({ filenameStatus: nextProps.filenameStatus });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var _props3 = this.props,
          iconDescription = _props3.iconDescription,
          buttonLabel = _props3.buttonLabel,
          filenameStatus = _props3.filenameStatus,
          labelDescription = _props3.labelDescription,
          labelTitle = _props3.labelTitle,
          className = _props3.className,
          multiple = _props3.multiple,
          other = _objectWithoutProperties(_props3, ['iconDescription', 'buttonLabel', 'filenameStatus', 'labelDescription', 'labelTitle', 'className', 'multiple']);

      var classes = (0, _classnames2.default)(_defineProperty({
        'bx--form-item': true
      }, className, className));

      return _react2.default.createElement(
        'div',
        _extends({ className: classes }, other),
        _react2.default.createElement(
          'strong',
          { className: 'bx--label' },
          labelTitle
        ),
        _react2.default.createElement(
          'p',
          { className: 'bx--label-description' },
          labelDescription
        ),
        _react2.default.createElement(FileUploaderButton, {
          labelText: buttonLabel,
          multiple: multiple,
          onChange: this.handleChange,
          disableLabelChanges: true
        }),
        _react2.default.createElement(
          'div',
          { className: 'bx--file-container' },
          this.state.filenames.length === 0 ? null : this.state.filenames.map(function (name, index) {
            return _react2.default.createElement(
              'span',
              _extends({
                key: index,
                className: 'bx--file__selected-file',
                ref: function ref(node) {
                  return _this5.nodes[index] = node;
                } // eslint-disable-line
              }, other),
              _react2.default.createElement(
                'p',
                { className: 'bx--file-filename' },
                name
              ),
              _react2.default.createElement(
                'span',
                { className: 'bx--file__state-container' },
                _react2.default.createElement(Filename, {
                  status: filenameStatus,
                  onClick: function onClick(evt) {
                    return _this5.handleClick(evt, index);
                  },
                  iconDescription: iconDescription,
                  onKeyDown: function onKeyDown(evt) {
                    if (evt.which === 13 || evt.which === 32) {
                      _this5.handleClick(evt, index);
                    }
                  }
                })
              )
            );
          })
        )
      );
    }
  }]);

  return FileUploader;
}(_react.Component);

FileUploader.propTypes = {
  iconDescription: _propTypes2.default.string,
  buttonLabel: _propTypes2.default.string,
  filenameStatus: _propTypes2.default.oneOf(['edit', 'complete', 'uploading']).isRequired,
  labelDescription: _propTypes2.default.string,
  labelTitle: _propTypes2.default.string,
  multiple: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  onClick: _propTypes2.default.func,
  className: _propTypes2.default.string
};
FileUploader.defaultProps = {
  iconDescription: 'Provide icon description',
  filenameStatus: 'uploading',
  buttonLabel: 'Add file',
  multiple: false,
  onChange: function onChange() {},
  onClick: function onClick() {}
};
exports.default = FileUploader;
exports.FileUploaderButton = FileUploaderButton;
exports.Filename = Filename;