'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Select = require('./Select');

var _Select2 = _interopRequireDefault(_Select);

var _SelectItem = require('./SelectItem');

var _SelectItem2 = _interopRequireDefault(_SelectItem);

var _TextInput = require('./TextInput');

var _TextInput2 = _interopRequireDefault(_TextInput);

var _array = require('../lib/array');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pagination = function (_Component) {
  _inherits(Pagination, _Component);

  function Pagination() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Pagination);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      page: _this.props.page,
      pageSize: _this.props.pageSize && _this.props.pageSizes.includes(_this.props.pageSize) ? _this.props.pageSize : _this.props.pageSizes[0]
    }, _this.handleSizeChange = function (evt) {
      var pageSize = Number(evt.target.value);
      _this.setState({ pageSize: pageSize, page: 1 });
      _this.props.onChange({ page: 1, pageSize: pageSize });
    }, _this.handlePageInputChange = function (evt) {
      var page = Number(evt.target.value);
      if (page > 0 && page <= Math.ceil(_this.props.totalItems / _this.state.pageSize)) {
        _this.setState({ page: page });
        _this.props.onChange({ page: page, pageSize: _this.state.pageSize });
      }
    }, _this.incrementPage = function () {
      var page = _this.state.page + 1;
      _this.setState({ page: page });
      _this.props.onChange({ page: page, pageSize: _this.state.pageSize });
    }, _this.decrementPage = function () {
      var page = _this.state.page - 1;
      _this.setState({ page: page });
      _this.props.onChange({ page: page, pageSize: _this.state.pageSize });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Pagination, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.uniqueId = '' + Math.floor(Math.random() * 0xffff);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref2) {
      var pageSizes = _ref2.pageSizes,
          page = _ref2.page,
          pageSize = _ref2.pageSize;

      if (!(0, _array.equals)(pageSizes, this.props.pageSizes)) {
        this.setState({ pageSize: pageSizes[0], page: 1 });
      }
      if (page !== this.props.page) {
        this.setState({
          page: page
        });
      }
      if (pageSize !== this.props.pageSize) {
        this.setState({ pageSize: pageSize });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          backwardText = _props.backwardText,
          className = _props.className,
          forwardText = _props.forwardText,
          id = _props.id,
          itemsPerPageText = _props.itemsPerPageText,
          itemRangeText = _props.itemRangeText,
          pageNumberText = _props.pageNumberText,
          pageRangeText = _props.pageRangeText,
          pageSize = _props.pageSize,
          pageSizes = _props.pageSizes,
          itemText = _props.itemText,
          pageText = _props.pageText,
          pagesUnknown = _props.pagesUnknown,
          isLastPage = _props.isLastPage,
          pageInputDisabled = _props.pageInputDisabled,
          totalItems = _props.totalItems,
          onChange = _props.onChange,
          pageNumber = _props.page,
          other = _objectWithoutProperties(_props, ['backwardText', 'className', 'forwardText', 'id', 'itemsPerPageText', 'itemRangeText', 'pageNumberText', 'pageRangeText', 'pageSize', 'pageSizes', 'itemText', 'pageText', 'pagesUnknown', 'isLastPage', 'pageInputDisabled', 'totalItems', 'onChange', 'page']);

      var statePage = this.state.page;
      var statePageSize = this.state.pageSize;
      var classNames = (0, _classnames2.default)('bx--pagination', className);
      var inputId = id || this.uniqueId;

      return _react2.default.createElement(
        'div',
        _extends({ className: classNames }, other),
        _react2.default.createElement(
          'div',
          { className: 'bx--pagination__left' },
          _react2.default.createElement(
            _Select2.default,
            {
              id: 'bx-pagination-select-' + inputId,
              labelText: itemsPerPageText,
              hideLabel: true,
              onChange: this.handleSizeChange,
              value: statePageSize
            },
            pageSizes.map(function (size) {
              return _react2.default.createElement(_SelectItem2.default, { key: size, value: size, text: String(size) });
            })
          ),
          _react2.default.createElement(
            'span',
            { className: 'bx--pagination__text' },
            itemsPerPageText,
            '\xA0\xA0|\xA0\xA0'
          ),
          _react2.default.createElement(
            'span',
            { className: 'bx--pagination__text' },
            pagesUnknown ? itemText(statePageSize * (statePage - 1) + 1, statePage * statePageSize) : itemRangeText(statePageSize * (statePage - 1) + 1, Math.min(statePage * statePageSize, totalItems), totalItems)
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'bx--pagination__right' },
          _react2.default.createElement(
            'span',
            { className: 'bx--pagination__text' },
            pagesUnknown ? pageText(statePage) : pageRangeText(statePage, Math.ceil(totalItems / statePageSize))
          ),
          _react2.default.createElement(
            'button',
            {
              className: 'bx--pagination__button bx--pagination__button--backward',
              onClick: this.decrementPage,
              disabled: this.props.disabled || statePage === 1
            },
            _react2.default.createElement(_Icon2.default, {
              className: 'bx--pagination__button-icon',
              name: 'chevron--left',
              description: backwardText
            })
          ),
          pageInputDisabled ? _react2.default.createElement(
            'span',
            { className: 'bx--pagination__text' },
            '|'
          ) : _react2.default.createElement(_TextInput2.default, {
            id: 'bx-pagination-input-' + this.id,
            placeholder: '0',
            value: statePage,
            onChange: this.handlePageInputChange,
            labelText: pageNumberText,
            hideLabel: true
          }),
          _react2.default.createElement(
            'button',
            {
              className: 'bx--pagination__button bx--pagination__button--forward',
              onClick: this.incrementPage,
              disabled: this.props.disabled || statePage === Math.ceil(totalItems / statePageSize) || isLastPage
            },
            _react2.default.createElement(_Icon2.default, {
              className: 'bx--pagination__button-icon',
              name: 'chevron--right',
              description: forwardText
            })
          )
        )
      );
    }
  }]);

  return Pagination;
}(_react.Component);

Pagination.propTypes = {
  backwardText: _propTypes2.default.string,
  className: _propTypes2.default.string,
  itemRangeText: _propTypes2.default.func,
  forwardText: _propTypes2.default.string,
  id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  itemsPerPageText: _propTypes2.default.string,
  itemText: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  pageNumberText: _propTypes2.default.string,
  pageRangeText: _propTypes2.default.func,
  pageText: _propTypes2.default.func,
  pageSizes: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
  totalItems: _propTypes2.default.number,
  disabled: _propTypes2.default.bool,
  page: _propTypes2.default.number,
  pageSize: _propTypes2.default.number,
  pagesUnknown: _propTypes2.default.bool,
  isLastPage: _propTypes2.default.bool,
  pageInputDisabled: _propTypes2.default.bool
};
Pagination.defaultProps = {
  backwardText: 'Backward',
  itemRangeText: function itemRangeText(min, max, total) {
    return min + '-' + max + ' of ' + total + ' items';
  },
  forwardText: 'Forward',
  itemsPerPageText: 'items per page',
  onChange: function onChange() {},
  pageNumberText: 'Page Number',
  pageRangeText: function pageRangeText(current, total) {
    return current + ' of ' + total + ' pages';
  },
  disabled: false,
  page: 1,
  pagesUnknown: false,
  isLastPage: false,
  pageInputDisabled: false,
  itemText: function itemText(min, max) {
    return min + '-' + max + ' items';
  },
  pageText: function pageText(page) {
    return 'page ' + page;
  }
};
exports.default = Pagination;