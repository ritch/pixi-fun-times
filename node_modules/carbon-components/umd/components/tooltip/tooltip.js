(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', '../../globals/js/misc/mixin', '../../globals/js/mixins/create-component', '../../globals/js/mixins/init-component-by-event', '../../globals/js/mixins/evented-show-hide-state', '../floating-menu/floating-menu', '../../globals/js/misc/get-launching-details'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('../../globals/js/misc/mixin'), require('../../globals/js/mixins/create-component'), require('../../globals/js/mixins/init-component-by-event'), require('../../globals/js/mixins/evented-show-hide-state'), require('../floating-menu/floating-menu'), require('../../globals/js/misc/get-launching-details'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.mixin, global.createComponent, global.initComponentByEvent, global.eventedShowHideState, global.floatingMenu, global.getLaunchingDetails);
    global.tooltip = mod.exports;
  }
})(this, function (exports, _mixin2, _createComponent, _initComponentByEvent, _eventedShowHideState, _floatingMenu, _getLaunchingDetails) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _mixin3 = _interopRequireDefault(_mixin2);

  var _createComponent2 = _interopRequireDefault(_createComponent);

  var _initComponentByEvent2 = _interopRequireDefault(_initComponentByEvent);

  var _eventedShowHideState2 = _interopRequireDefault(_eventedShowHideState);

  var _floatingMenu2 = _interopRequireDefault(_floatingMenu);

  var _getLaunchingDetails2 = _interopRequireDefault(_getLaunchingDetails);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Tooltip = function (_mixin) {
    _inherits(Tooltip, _mixin);

    /**
     * Tooltip.
     * @extends CreateComponent
     * @extends InitComponentBySearch
     */
    function Tooltip(element, options) {
      _classCallCheck(this, Tooltip);

      var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, element, options));

      ['mouseover', 'mouseout', 'focus', 'blur'].forEach(function (name) {
        _this.element.addEventListener(name, function (event) {
          _this._handleHover(event);
        });
      });
      return _this;
    }

    /**
     * A method called when this widget is created upon events.
     * @param {Event} event The event triggering the creation.
     */


    _createClass(Tooltip, [{
      key: 'createdByEvent',
      value: function createdByEvent(event) {
        this._handleHover(event);
      }
    }, {
      key: 'changeState',
      value: function changeState(state, detail, callback) {
        if (!this.tooltip) {
          var tooltip = this.element.ownerDocument.querySelector(this.element.getAttribute(this.options.attribTooltipTarget));
          if (!tooltip) {
            throw new Error('Cannot find the target tooltip.');
          }

          // Lazily create a component instance for tooltip
          this.tooltip = _floatingMenu2.default.create(tooltip, {
            refNode: this.element,
            classShown: this.options.classShown,
            offset: this.options.objMenuOffset
          });
          this.children.push(this.tooltip);
        }

        // Delegates the action of changing state to the tooltip.
        // (And thus the before/after shown/hidden events are fired from the tooltip)
        this.tooltip.changeState(state, Object.assign(detail, { delegatorNode: this.element }), callback);
      }
    }, {
      key: '_handleHover',
      value: function _handleHover(event) {
        var state = {
          mouseover: 'shown',
          mouseout: 'hidden',
          focus: 'shown',
          blur: 'hidden'
        }[event.type];
        this.changeState(state, (0, _getLaunchingDetails2.default)(event));
      }
    }]);

    return Tooltip;
  }((0, _mixin3.default)(_createComponent2.default, _initComponentByEvent2.default, _eventedShowHideState2.default));

  Tooltip.components = new WeakMap();
  Tooltip.options = {
    selectorInit: '[data-tooltip-trigger]',
    classShown: 'bx--tooltip--shown',
    attribTooltipTarget: 'data-tooltip-target',
    objMenuOffset: { top: 10, left: 0 },
    initEventNames: ['mouseover', 'focus']
  };
  exports.default = Tooltip;
});